#!/bin/bash
# <%= @servername %>:<%= @__file__ %>
# add-user-dn:  support wrapper around mapdn.py using sudo 

username=""
dn=""

usage() {
  echo "Usage:"
  echo "  add-user-dn --user someuser --dn \"/DC=foo/DC=bar/CN=foo bar\""
  echo "  add-user-dn --user someuser--cert certfile"
  exit 0
}

# command line argument processing
ARGS=`getopt -o '' -l dn:,cert:,user: -- "$@"`
if [ $? -ne 0 ]
then
    usage
fi
eval set -- "$ARGS"
dn=""
certfile=""
username=""
while true; do
  case "$1" in
    --dn)  dn="$2" ; shift 2 ;;
    --cert) certfile="$2" ; shift 2 ;;
    --user) username="$2" ; shift 2 ;;
    *) break
  esac
done
if [ -z "$dn" -a -z "$certfile" ]; then
  usage
fi

# determine DN from certfile, if necessary
if [ -z "$dn" -a -n "$certfile" ]; then
  if [ ! -r $certfile ]; then
    echo "$0:  Cannot read $certfile"
    exit -4
  else
    dn=$(openssl x509 -in $certfile -inform PEM -subject -noout 2>/dev/null | sed 's/^subject= //')
  fi
fi

# sanity check
if [ -n "$username" ]; then
  uid=$(id -u "$username" 2>/dev/null)
  if [ -n "$uid" ]; then
    if [ $uid -le <%= @uid_threshold %> ]; then
      echo "Cannot manipulate DNs for system accounts, exiting"
      exit -16
    fi
  elif [ -z "$uid" ]; then
    echo "Could not determine uid of $username, exiting"
    exit -8
  fi
fi

# add to map
if [ -n "$username" -a -n "$dn" ]; then
  <%= @install_dir %>/sbin/mapdn.py --add --user "$username" --dn "$dn"
  retcode=$?
  if [ $retcode -eq 0 ]; then
    # if on a host with a grid-mapfile, do an immediate update
    if [ -e /etc/grid-security/grid-mapfile -a -x <%= @install_dir %>/sbin/mapdn.cron ]; then
      <%= @install_dir %>/sbin/mapdn.cron
    fi
  fi
  exit $retcode
elif [ -z "$username" ]; then
  echo "$0:  Could not determine username, exiting"
  exit -1
elif [ -z "$dn" ]; then
  echo "$0:  Could not determine DN, exiting"
  exit -2
else
  echo "$0:  Unknown error, exiting"
  exit -32
fi

